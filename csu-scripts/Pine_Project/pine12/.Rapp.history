#
#
#
#
#
#
#
#
#
#
#
rm(list=ls()) #
#
#
#
myScriptPath <- function(name, ROOT="/Users/sfield/Documents", setdir=FALSE) {#
   path <- gsub(name,"", list.files(ROOT, full.names=TRUE, recursive=TRUE, pattern=name))#
   if (setdir) setwd(path)#
   path }#
#
dir <- myScriptPath(name="pine12.R", setdir=TRUE)#
#
source(paste(dir,"pine12_Subroutines.R", sep="")) #
#
#
pine12 <- function(Gen = 200,                                             #
     x1 = c(62580, 38, 79, 65, 91, 353, 0,0,0,0,0,0),                     #
     #
     Beta = 0.044,                                                        #
     LAIb = 0, r.site=1,                                                  #
     delta = 0.15, C.f=1/8, jv.ad=0.1,                                    #
     Cmax = 7.5, SpC=3.7, S.cone=46,                                      #
     P.find = 0.8, nBirds=3, P.cons=0.3,                                  #
     alpha1 = 0.456, alpha2=0.0736, alpha3=2.070,                         #
     c2 = 0.99, c3= 0.87,                                                 #
     dbh.v = c(0, 0, 0, 2.05, 12.5, 37),                                  #
     M = c(1, 0.152, 0.105, 0.02, 0.015), m6=0.005,                       #
     R = c(1, 4, 16, 20, 50, 0),                                          #
     plot = FALSE,                                                        #
     out = TRUE) {                                                        #
#
#
#
#
#
#
#
#
#
stages <- length(x1)#
popn.Mat <- matrix(0, Gen, stages)			#
popn.Mat[1,]= x1							#
Pop.Total = sum(x1[-1])	  				#
LAI.v = NA									#
Prev.v = sum(x1[8:12])/(sum(x1[-1]))	#
r.cache.v = NA    							#
Cones.v = NA								#
SR.v = NA									#
#
#
#
#
#
M <- c(M,m6)#
S.par <- vitals(R, M)["S",]#
T.par <- vitals(R, M)["T",]#
#
#
#
#
#
#
LA.v <- alpha2 * (dbh.v^alpha3)#
LA.v[3]= alpha1					#
#
#
#
#
B.par = c(0, rep(Beta,5))			#
#
#
#
#
#
C.par <- 1 - exp(-delta*(dbh.v))		#
C.par[2]= 1 - c2#
C.par[3]= 1 - c3#
C.par <- c(rep(1,6), C.par)			#
#
#
#
#
#
#
S = diag(S.par) + R.diag(T.par[1:5],-1)#
#
#
C = diag(C.par)#
#
#
B = diag(B.par)#
#
#
I6 <- diag(6)#
#
#
SM <- BlockMat(list(S,zeros(6), zeros(6),S), b=2) %*% C#
#
#
BM <- BlockMat(list(I6-B,zeros(6), B,I6), b=2)#
#
#
#
#
for (n in 2:Gen) {#
#
#
#
	f1.vec = rep(0,stages)#
	f2.vec = rep(0,stages)#
	x.vec = popn.Mat[n-1,]#
	#
	#
	#
	#
	#
	LAI.x = sum(LA.v * x.vec) / 10000 + LAIb	#
#
	#
	#
	#
	SpB <- x.vec[1] / nBirds#
	r.cache <- 0.73 / (1 + exp((31000 - SpB)/3000)) + 0.27#
	r.cache.v[n] = r.cache					#
	r.ALs <- 1 / (1 + exp(2*(LAI.x - 3)))#
	#
	#
	#
	#
	SR <- (((1 - P.find) * (1 - P.cons)) / SpC) * r.cache * r.ALs * r.site   #
	SR.v[n] = SR							#
	f2.vec[2] <- x.vec[1] * SR				#
	x.vec <- x.vec + f2.vec				#
	#
	#
	#
	#
	y.vec <- SM %*% x.vec					#
#
	#
	#
	#
	LAI.y <- sum(LA.v * y.vec) / 10000 + LAIb	#
	LAI.v[n] = LAI.y							#
#
	#
	#
	#
	r.cones <- (0.5/(1 + exp(5*(LAI.y - 2.25))) + 0.5)#
	C.tree <- r.cones * Cmax#
	Cones.v[n] = C.tree#
	f1.vec[1] <- (S.cone * C.tree) * (jv.ad*y.vec[5] + y.vec[6] + C.f * (jv.ad*y.vec[11] + y.vec[12]))#
	#
	#
	#
	#
	y.vec <- y.vec + f1.vec			#
	popn.Mat[n,] <- BM %*% y.vec		#
#
#
#
#
	Pop.Total[n] = sum(popn.Mat[n,-1])			               #
	Prev.v[n] = sum(popn.Mat[n,8:12])/(sum(popn.Mat[n,-1]))     #
#
}  #
#
#
#
#
Dead <- dead.trees(popn.Mat, s=S.par, t=T.par, cc=C.par)   #
Groups <- group.class(popn.Mat)		#
PrevGroup <- prev.class(popn.Mat,Prev.v)#
Lambda <- LambdaGrow(Pop.Total)#
#
#
#
#
#
#
if (plot) {#
	par(mfrow=c(3,3))#
	plot(1:Gen, Pop.Total, 'l', xlim=c(0,Gen), xlab="Years", main="Total Population", ylab="Total Whitebark Population: Class 2-12", col='navy', lwd=1.5); grid()#
	plot(1:Gen, popn.Mat[,1], 'l', xlim=c(0,Gen), xlab="Years", main="Seed Population", ylab="Total Seeds", col='darkgreen', lwd=1.5, lty=1); grid()#
	plot(1:Gen, PrevGroup[,1], 'l', col='dark red', xlab="Years", main="Rust Prevalence", ylab="Proportion infected individuals", lwd=1.5); grid()#
#
	for (p in 2:stages) {#
  		if (p==2) {plot(1:Gen, popn.Mat[,p], 'l', ylim=c(0,max(popn.Mat[,2:stages])), xlim=c(0,Gen), xlab="Years", main="Susceptible Population", ylab="Whitebark Population by Class", col=p, lwd=1.5); grid()#
  		legend('topright', legend=c(2:6), lty=c(rep(1,5)), col=c(2:6), lwd=1.5, cex=0.4, bg='gray95')#
  		}#
  		if (p >= 3 && p <= 6) lines(1:Gen, popn.Mat[,p], 'l', xlim=c(0,Gen), col=p, lwd=1.5)#
  		#
  		if (p == 8) {plot(1:Gen, popn.Mat[,p], 'l', ylim=c(0,max(popn.Mat[,9:stages])), xlim=c(0,Gen), xlab="Years", main="Infected Population", ylab="Whitebark Population by Class", lty=2, col=p-6, lwd=1.5); grid()#
  		legend('topright', legend=c(8:12), lty=c(rep(2,5)), col=c(2:6), lwd=1.5, cex=0.4, bg='gray95')#
  		}#
  		if (p >= 9) lines(1:Gen, popn.Mat[,p], 'l', xlim=c(0,Gen), lty =2, col=p-6, lwd=1.5)#
	}#
#
	plot(1:(Gen-1), LAI.v[2:Gen], 'l', xlab="Years", main="Leaf Area Index", ylab="LAI.y", lty=4, lwd=1.5); grid()#
	plot(1:(Gen-1), SR.v[2:Gen], 'l', xlim=c(0,Gen), xlab="Years", main="Seedling Recruitment", ylab="Germination rate", col='darkorchid', lwd=1.5, lty=4); grid()#
	plot(1:(Gen-1), r.cache.v[2:Gen], 'l', xlab='Years', ylab='r.cache', main="r.cache", col="red", lwd=1.5, lty=4); grid()#
	plot(1:(Gen-1), Cones.v[2:Gen], 'l', xlab='Years', ylab='C.tree', main="Total Cones per Tree", sub="A function of r.cones", col="brown", lwd=1.5, lty=4); grid()#
}#
	#
	#
	Out <- list(#
		Pop.Projection = round(popn.Mat,3), #
		Pop.Proj.GroupClass = round(Groups,3), #
		Pop.Totals = round(Pop.Total,2), #
		Prevalence = PrevGroup,#
		LAI.y = LAI.v,#
		r.cache = r.cache.v,#
		Cones.tree = Cones.v,#
		Germination.rate = SR.v,#
		S.Matrix = SM, B_Matrix = BM, #
		y.vec = y.vec,#
		f.vec = f1.vec + f2.vec,#
		FinalPopVec = popn.Mat[Gen,],#
		FinalSum = sum(popn.Mat[Gen,-1]),#
		Adults = sum(popn.Mat[Gen,c(6,12)]),#
		Dead.Trees = Dead,#
		Delta.Grow = Lambda)#
	if (out) Out#
#
}
pine12(Gen=10)$Pop.Projection
pine12(Gen=10)$Prevalence
